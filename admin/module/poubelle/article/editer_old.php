<?php//extends ModuleSqueletteclass ModuleArticleEditer extends ModuleAdmin{		private $_id = '';	// private static $_page = null;		public function __construct($url, $query, $urlArray, $conf){		parent::__construct($url, $query, $urlArray, $conf);						require(ROOT_PATH.$this->_config['librairie']['interstitium'].'article.class.php');		$path = BASE_PATH.$this->_config['path']['data'].$urlArray[1].'/'.$urlArray[2].$this->_config['ext']['data'];		self::$myPage = new Xml_Article($path);	}		public function setBreadCrumbs($link, $name, $title, $isLink){		self::$multiArrayToParse[]= array('crumbs' => array('LINK' 	=> $link,																	'NAME' 	=>$name,																	'TITLE' 	=> $title,																	'IS_LINK' 	=> $isLink));	}	public function setData(){		$this -> _templateNameModule 	= 'index';		// si un id (d'un index) est passé en argument		// Collection d'articles		 if(isset($this -> _urlQuery['id']) && !empty($this -> _urlQuery['id'])){			$id = $this -> _urlQuery['id'];			$idArray = explode(',',$id);						// tag object			$pathTag = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/tags-'.$idArray[0].'.data';			require(ROOT_PATH.$this->_config['librairie']['interstitium'].'tags.class.php');			$this -> _tags = new Tags($pathTag);						// si un nom d'article est passé en argument			if(isset($this -> _urlQuery['article']) && !empty($this -> _urlQuery['article'])){	// si un article est demandé				$path = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/'.$this -> _urlQuery['article'].$this->_config['ext']['data'];				$this -> _id = $this -> _urlQuery['article'];				self::$arrayToParse['FORM_ID'] =	$id.','.$this -> _id;				$pathData = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/'.$this -> _urlQuery['article'].$this->_config['ext']['data'];			// sinon			}else{				self::$arrayToParse['FORM_ID'] =	$id;				$path = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/00-'.'index'.$this->_config['ext']['data'];				$pathData = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/00-index'.$this->_config['ext']['data'];			} 						// redirection si le fichier n'existe pas			if(!is_file($pathData)) 	FrontController::redirect($this->_idPage.'.html?id='.$id);					//  tag object (over-write)		//	$pathTag = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/tags.data';		//	require(ROOT_PATH.$this->_config['librairie']['interstitium'].'tags.class.php');		//	$this -> _tags = new Tags($pathTag);						//--------------------------			// READ THE DATA			//$titreCollection = self::$_page -> setArticlesList();			if(!isset($this -> _urlQuery['action']) or empty($this -> _urlQuery['action'])){				$this -> _urlQuery['action'] = '';			}			$this -> setGlobalContent($this -> _urlQuery['action'],$pathData,$id); 		 }else{			echo 'PAS DE FICHIER/PAGE CHOISI(E) !!!!! (pas d\'$id)...';		} 			}			public function setArticleNavigation($articlesList){		if(isset($articlesList[$this -> _id])){			$idArray = array_keys($articlesList);			$posPage = array_search($this -> _id, $idArray);			if($posPage > 0){				$idP = $idArray[$posPage - 1];				self::$multiArrayToParse[]= array('previous' => array('LINK' => $this -> _idPage.','.$articlesList[$idP]['id'].$this->_config['ext']['web'],																	  'TITLE' => $articlesList[$idP]['titre']																		));			}			if(isset($idArray[$posPage + 1])){				$idN = $idArray[$posPage + 1];				self::$multiArrayToParse[]= array('next' => array('LINK' => $this -> _idPage.','.$articlesList[$idN]['id'].$this->_config['ext']['web'],																  'TITLE' => $articlesList[$idN]['titre']																));			}		} 	}		public function setPageNavigation($nbItem, $nbItemPerPage){		self::$arrayToParse['NB_ARTICLE'] = $nbItem;		$ratio = floor(($nbItem-1)/$nbItemPerPage)+1;			if($ratio > 1){			self::$arrayToParse['IS_NAVIGATION']=true;			for($k = 1; $k <= $ratio; $k++){				self::$multiArrayToParse[]= array('navigation' => array('NB' => $k,																		'LINK' =>  $this->urlAddQuery(array('nb'=>$k))																		));			}		}else{			self::$arrayToParse['IS_NAVIGATION']=false;		}	}	//-------------------------	//  EDITING	//-------------------------		public function setGlobalContent($action,$path,$id){		self::$_page =  new Xml_Article($path);				//self::$arrayToParse['LINK_EDITCONTENT'] =	$this -> _url.$this->_config['ext']['web'].'?id='.$id.'&action=editcontent';		self::$arrayToParse['LINK_INDEX'] 		=	$this->urlAddQuery(array('id'=>$id),true);		self::$arrayToParse['LINK_EDITMENU'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editmenu'),true);		self::$arrayToParse['LINK_EDITINFO'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editindexinfo'),true);		self::$arrayToParse['LINK_EDITDESIGN'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editdesign'),true);				self::$arrayToParse['LIEN_TOUS_LES_ARTICLES']=	$this -> _idPage.$this->_config['ext']['web'].'?id='.$id;				$infos = self::$_page -> getInfo();		$this -> parseArray($infos,'form_');				self::$arrayToParse['IS_PUBLISHED'] 	=	false;		if($infos['publication'] == 1){			self::$arrayToParse['IS_PUBLISHED'] 	=	true;		}				//self::$arrayToParse['FORM_ID'] =	$id.$this->_id;		$titreCollection = self::$_page -> setArticlesList();		self::$arrayToParse['TITRE_COLLECTION'] = $titreCollection;					$this -> formTarget($_SERVER['REQUEST_URI'], 'FICHIER_CIBLE');		$this -> formTarget($_SERVER['REQUEST_URI'], 'ADD_FLUX_CIBLE');		// XXX free $action = filter_var($action, FILTER_SANITIZE_STRING);		switch($action){			case 'editindexinfo':				$this->_templateNameModule = 'indexinfo';				$oldData = self::$_page -> getInfo();	// data of xml				if(isset($_POST) and !empty($_POST)){					$postData = $_POST['info'];					// edit xml file					$this -> editInfoXml($id, $postData, $oldData);					$data = array('droits' => $postData['droit'], 'publication' => $postData['publication']);					// edit menu file					$this ->  updateMenu($id, $data);				}				// parse data				$this -> parseInfo();				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				break;			case 'editmenu':				$this->_templateNameModule = 'indexmenu';				$this -> editMenu($id);				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				//$this -> editMenuOld($path,$id);				break;			case 'editcontentarticle':				$this->_templateNameModule = 'articlecontent';				self::$arrayToParse['LINK_EDITCONTENT_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editcontentarticle'),true);				self::$arrayToParse['LINK_EDITINFO_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editinfoarticle'),true);				self::$arrayToParse['LINK_PUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'publisharticle'),true);				self::$arrayToParse['LINK_UNPUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'unpublisharticle'),true);				$this -> editContent();				$this->setBreadCrumbs($this->urlAddQuery(array('id'=>$id),true), $titreCollection, $titreCollection, true);				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				//$this -> editContentOld($path,$id.','.$this -> _id);				break;			case 'editinfoarticle':				$this->_templateNameModule = 'articleinfo';				self::$arrayToParse['LINK_EDITCONTENT_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editcontentarticle'),true);				self::$arrayToParse['LINK_EDITINFO_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editinfoarticle'),true);				self::$arrayToParse['LINK_PUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'publisharticle'),true);				self::$arrayToParse['LINK_UNPUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'unpublisharticle'),true);								$oldData = self::$_page -> getInfo();	// data of xml				if(isset($_POST['info']) and !empty($_POST['info'])){					$postData = $_POST['info'];					// edit xml file					$this -> editInfoXml($id, $postData, $oldData);					// edit 00-index.xml				}				// parse data				$this -> parseInfo();				$this->setBreadCrumbs($this->urlAddQuery(array('id'=>$id),true), $titreCollection, $titreCollection, true);				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				/* $this -> editInfo($path,$id.','.$this -> _id); */				break;			case 'deletearticle':				$this -> deleteArticle($path,$id);				self::$arrayToParse['CURRENT_CRUMB'] = $titreCollection;				//echo $path;				break;			case 'editdesign':				$this->_templateNameModule = 'editdesign';				$this -> editDesign($path,$id);				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				break;			case 'createarticle':				$this -> createArticle($path,$id);				//break;			default:				//echo 'Pas d action définie!!!! Erreur!!!';				$this -> _templateNameModule 	= 'index';				$target = $this->urlAddQuery(array('id'=>$id, 'action' => 'createarticle'),true);				$this -> formTarget($target, 'FICHIER_CIBLE');				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				break;		}		$publish = '';		if(isset($this -> _urlQuery['publish'])){			$publish = $this -> _urlQuery['publish'];		}		switch($publish){			case 'add':				/* $this->_templateNameModule = 'publisharticle';				self::$arrayToParse['LINK_EDITCONTENT_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editcontentarticle'),true);				self::$arrayToParse['LINK_EDITINFO_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editinfoarticle'),true);				self::$arrayToParse['LINK_PUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'publisharticle'),true);				self::$arrayToParse['LINK_UNPUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'unpublisharticle'),true);				 $this -> parseInfo();				 */				$oldData = self::$_page -> getInfo();								//if(isset($_POST['publish']['rss'])){		// Publish					// si il n'y a pas de droits sur la page, alors on peut la mettre dans le flux				//	if($_POST['publish']['rss'] == 1				//		&& ($oldData['droit']<0 && $oldData['publication']>0)) {							$oldData['titre']='Article : '.$oldData['titre'].' ('.$titreCollection.')';							$this -> addTofluxSyndication(self::$arrayToParse['FORM_ID'],$oldData);		 // Flux ATOM								//	}					// Actualiser la date de création du fichier (aujourd'hui)					self::$_page -> setInfo($id, array('publication'=> 1, 'date' => date('d.m.Y')));				//} 				break;			case 'remove':				/* $this->_templateNameModule = 'unpublisharticle';				self::$arrayToParse['LINK_EDITCONTENT_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editcontentarticle'),true);				self::$arrayToParse['LINK_EDITINFO_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editinfoarticle'),true);				self::$arrayToParse['LINK_PUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'publisharticle'),true);				self::$arrayToParse['LINK_UNPUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'unpublisharticle'),true);				 */$this -> parseInfo();				$oldData = self::$_page -> getInfo();				if(isset($_POST['ok']) && $_POST['ok'] == 'ok'){					// supprimer du flux rss					$this -> removeTofluxSyndication(self::$arrayToParse['FORM_ID']);		 // Flux ATOM									// actualiser le fichier _id.xml ainsi que 00-index.xml					self::$_page -> setInfo($id, array('publication'=> 0, 'date' => date('d.m.Y')));				}				break;		}				$this->articlesList($id);			}		public function articlesList($id){			$titreCollection = self::$_page -> setArticlesList();			$articlesList = self::$_page -> getSelectionArticleList();			//------------------------------			// PREVIOUS - NEXT			$this -> setArticleNavigation($articlesList);						// LINKS FOR THE TAGS (single article)			//$this -> setTagsLink($articlesList);						// NAVIGATION PAGE			$nbItemPerPage = self::$_page -> getOption();			//$nbItem	= count($selectionArticlesList);			$nbItem	= count($articlesList);			$this -> setPageNavigation($nbItem, $nbItemPerPage);									if(isset($this -> _urlQuery['nb'])){				$nb = intval($this -> _urlQuery['nb']);				$nb = floor(abs($nb));			}else{				$nb = 1;			}			$i=1;						// foreach($selectionArticlesList as $key=>$value){			foreach($articlesList as $key=>$article){				// $article = $articlesList[$value];				$maDate = $this->afficherDate($article['date'],$_SESSION['langue'],$nomJour=1,$moisAbrev=1);					if(($nb-1)*$nbItemPerPage<$i && $i<=$nb*$nbItemPerPage){						$online = false;						$pub = 'add';						if($article['publication']==1){							$online = true;							$pub = 'remove';						}						self::$multiArrayToParse[]= array('article' => array('TITRE' 	=> $article['titre'],																		 'DATE' 	=> $article['date'],																		 'AUTEUR' 	=> $article['author'],																		 'DESCRIPTION' 	=> $article['description'],																		 'MOTSCLEFS' 	=> $article['tags'],																		// 'LIEN'		=> $this -> _idPage.','.$article['id'].$this->_config['ext']['web'],																		 'NOM_JOUR'  	=> 	$maDate[0],																		 'JOUR'			=>  $maDate[1],																		 'MOIS'			=> 	$maDate[2],																		 'ANNEE' 		=> 	$maDate[4],																		 'IS_ONLINE'	=>  $online,																		 'LINK_EDIT'	=>  $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'], 'action' => 'editcontentarticle'),true),																		 'LINK_DELETE'	=>  $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'], 'action' => 'deletearticle'),true),																		 'LINK_PUBLISH'	=>  $this->urlAddQuery(array('publish' => $pub),false)																																				// $this -> _idPage.','.$article['id'].$this->_config['ext']['web'].'?';																	));					}					$i++;			}					return $titreCollection;	}		public function createArticle($path,$id){		if(isset($_POST['title']) && !empty($_POST['title'])){			//echo $_POST['title'];			$idArray = explode(',',$id);			$origine = BASE_PATH.'/datamodel/'.$this->_module.'/';			$destination = $dirPath = dirname($path).'/';			if(is_dir($origine) && is_dir($destination)){				if(is_file($origine.'new.xml')){					// Copy & Rename					$fileName = self::removeAccents(urldecode($_POST['title']), $charset='utf-8',$del=false);					$fileName = strtolower($fileName);					$fileName = self::removeShortWords($fileName);					if($idFile = self::copyFile($origine.'new.xml', $destination.$fileName.'.xml')){						$path_parts = pathinfo($idFile);						$idFile = $path_parts['filename'];						//echo '<br/>'.$idFile;						self::$_page -> addArticleItem($idFile, $title=$_POST['title']);						//$self::_page -> addArticleItem($idFile);											}								}			}		}	}		public function deleteArticle($path,$id){		$idArray = explode(',',$id);		if(isset($_POST) and !empty($_POST)){			if(isset($_POST['ok']) && $_POST['ok'] == 'ok'){					// On supprime la page				$this->_templateNameModule = 'confirmation'; 				self::$_page -> deleteArticle($path,$this -> _id); 			// delete file				}else{				$this->_templateNameModule = 'delete';				$redirectPaht = basename(parse_url($_SERVER['REQUEST_URI'],PHP_URL_PATH ));				$redirectPaht  = $_SERVER['SERVER_NAME'].rtrim(dirname($_SERVER['SCRIPT_NAME']), '/\\');				//FrontController::redirect('');							}		}else{			$this->_templateNameModule = 'delete';			$this -> formTarget($this->urlAddQuery(array('id'=>$id, 'article' =>$this -> _id, 'action' => 'deletearticle'),true), 'FICHIER_CIBLE');		}	}	}		?>