<?php//extends ModuleSqueletteclass ModuleAdminPagemulti extends ModuleAdmin{		private $_id = null;		// ID de l'article	"nom-de-l-article"	// private static $_page = null;		public function __construct($url, $query, $urlArray, $conf){		parent::__construct($url, $query, $urlArray, $conf);				require(ROOT_PATH.$this->_config['librairie']['interstitium'].'pagemulti.class.php');		require(ROOT_PATH.$this->_config['librairie']['interstitium'].'page.class.php');		//$path = BASE_PATH.$this->_config['path']['data'].$urlArray[1].'/'.$urlArray[2].$this->_config['ext']['data'];		self::$myPage = new Xml_Page($urlArray);	}	public function setData(){		$this -> _templateNameModule 	= 'index';		self::$multiArrayToParse[]= array('crumbs' => array('LINK' 	=> 'fr,menu,index.html',															'NAME' 	=> 'Menu',															'TITLE' 	=> 'Menu',															'IS_LINK' 	=> true										));		// si un id (d'une collection d'articles) est passé en argument		 if(isset($this -> _urlQuery['id']) && !empty($this -> _urlQuery['id'])){			$idPage = $this -> _urlQuery['id'];		// = lg,article,nom-de-la-collection-d-article			$idArray = explode(',',$idPage );						if(isset($this -> _urlQuery['bloc']) && !empty($this -> _urlQuery['bloc'])){	// si un article est demandé				$this -> _id = $this -> _urlQuery['bloc'];			}						// PAGE object			self::$_page = new Xml_Pagemulti($idArray, 'root');						if(self::$_page -> error){				// redirection si le fichier n'existe pas				$this -> _menu -> deleteNodeId($idPage);	// supprime du menu				Xml_Page::removeId($idPage);				// supprime du flux, tags etc.				FrontController::redirect('');				//echo '<br/>pbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb';			}			self::$arrayToParse['FORM_ID'] =	$idPage;									$this -> formTarget($_SERVER['REQUEST_URI'], 'FICHIER_CIBLE');						// remonter/descendre un article			if(isset($this -> _urlQuery['move']) && !empty($this -> _urlQuery['move'])){				//echo $this -> _id;				self::$_page  -> moveNodeId($this -> _id,$this -> _urlQuery['move']);				//FrontController::redirect(basename(parse_url($_SERVER['REQUEST_URI'],PHP_URL_PATH )).'?id='.$this -> _urlQuery['id']);			}						switch($this -> _action){				case 'editer':					$this -> editPage($idPage);					// cette fonction publie le contenu, si le lien					// dsfsdfs/fr,page,editer?id=xx,xxxx,xxxx&publish=publish					// a été cliqué					$this -> publish($idPage);										break;				case 'supprimer':					$this -> deleteContent($idPage);					break;				default:					break;			} 			// parse data			$this -> parseInfo();							}elseif(isset($this -> _urlQuery['title']) && !empty($this -> _urlQuery['title']) 			&& isset($this -> _urlQuery['lg']) && !empty($this -> _urlQuery['lg']) 			&& $this -> _action == 'create'){						// Créer une page			//Xml_Page::createPage($this -> _urlQuery['lg'],$this -> _urlQuery['title']);			$this -> createContent();		}			}				public function setPageNavigation($nbItem, $nbItemPerPage){		self::$arrayToParse['NB_ARTICLES'] = $nbItem;		$ratio = floor(($nbItem-1)/$nbItemPerPage)+1;			if($ratio > 1){			self::$arrayToParse['IS_NAVIGATION']=true;			for($k = 1; $k <= $ratio; $k++){				self::$multiArrayToParse[]= array('navigation' => array('NB' => $k,																		'LINK' =>  $this->urlAddQuery(array('nb'=>$k))																		));			}		}else{			self::$arrayToParse['IS_NAVIGATION']=false;		}	}	//-------------------------	//  EDITING	//-------------------------		public function editPage($id){				if(!isset($this -> _urlQuery['action']) or empty($this -> _urlQuery['action'])){			$this -> _urlQuery['action'] = '';		}				if(isset($this -> _urlQuery['publishbloc']) And !empty($this -> _urlQuery['publishbloc'])){				$this -> publishBloc($this -> _urlQuery['publishbloc']);		}				//$this -> setGlobalContent($this -> _urlQuery['action'],$idCollection); 		$action = $this -> _urlQuery['action'];				/* require(ROOT_PATH.$this->_config['librairie']['interstitium'].'article.class.php');		self::$_page =  new Xml_Article($path);		 */		//self::$arrayToParse['LINK_EDITCONTENT'] =	$this -> _url.$this->_config['ext']['web'].'?id='.$id.'&action=editcontent';		self::$arrayToParse['LINK_EDITCONTENT'] 		=	$this->urlAddQuery(array('id'=>$id),true);		self::$arrayToParse['LINK_EDITMENU'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editmenu'),true);		self::$arrayToParse['LINK_EDITINFO'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editinfo'),true);		self::$arrayToParse['LINK_EDITDESIGN'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editdesign'),true);				self::$arrayToParse['LINK_EDITCONTENT_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editcontentarticle'),true);		self::$arrayToParse['LINK_EDITINFO_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editinfoarticle'),true);		self::$arrayToParse['LINK_PUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'publisharticle'),true);				/* self::$arrayToParse['LINK_EDITPUBLISH'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editpublish'),true);		 */		self::$arrayToParse['LIEN_TOUS_LES_ARTICLES']=	$this -> _idPage.$this->_config['ext']['web'].'?id='.$id;				// Infos-data of the index / article!		$infos = self::$_page -> getInfo();		$this -> parseArray($infos,'form_');						// Si le contenu est publié		if($infos['publication'] == 1){			self::$arrayToParse['IS_ONLINE'] 	=	true;			self::$arrayToParse['LINK_PUBLISH'] 	=	$this->urlAddQuery(array('publish' => 'unpublish'),false);		}else{			self::$arrayToParse['IS_ONLINE'] 	=	false;			self::$arrayToParse['LINK_PUBLISH'] 	=	$this->urlAddQuery(array('publish' => 'publish'),false);		}		// Si y'a pas de droits		(intval($infos['droit'])<0) ? self::$arrayToParse['HAS_RIGHT'] = false :  self::$arrayToParse['HAS_RIGHT'] = true;							$this -> formTarget($_SERVER['REQUEST_URI'], 'FICHIER_CIBLE');		$this -> formTarget($_SERVER['REQUEST_URI'], 'ADD_FLUX_CIBLE');				$this->_templateNameModule = $action;		// BreadCrumbs		self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];						// XXX free $action = filter_var($action, FILTER_SANITIZE_STRING);		switch($action){			case 'editinfo':				$this -> editInfo($id);				// $this -> editOption($id);				break;			case 'editmenu':				$this -> editMenu($id);				break;			// case 'editcontent':				// $this -> editContent();				// break;			case 'editbloc':				$this -> editBloc();				// BreadCrumbs				//$this->setBreadCrumbs($this->urlAddQuery(array('id'=>$id),true), $titreCollection, $titreCollection, true);				break;				case 'deletebloc':				$this -> deletebloc($id);				//self::$arrayToParse['CURRENT_CRUMB'] = $titreCollection;				break;			case 'editdesign':				$this -> editDesign($id);				break;			case 'addbloc':				$this -> addBloc($id);			default:				$this -> editContent();				$this -> _templateNameModule 	= 'index';				$target = $this->urlAddQuery(array('id'=>$id, 'action' => 'addbloc'),true);				$this -> formTarget($target, 'FICHIER_CIBLE');								$this -> formTarget($_SERVER['REQUEST_URI'], 'FICHIER_CIBLE_CONTENU_SECONDAIRE');								break;		}								$blocs = self::$_page -> getBlocs();		if($blocs != FALSE){			$i = 1;			foreach($blocs as $bloc){				$publish='publish';				if($bloc['publish']==1){					$publish='unpublish';				}				self::$multiArrayToParse[]= array('blocs' => array('TITRE' 	=> $bloc['titre'],																	'ID' 	=> $i,																	'CONTENU' 	=> $bloc['contenu'],																	'IS_ONLINE' => $bloc['publish'],																	'LIEN_PUBLISH'	=>  $this->urlAddQuery(array('id'=>$id,'bloc' =>$i,'publishbloc' => $publish),true),																	'LINK_EDIT'	=>  $this->urlAddQuery(array('id'=>$id,'bloc' =>$i, 'action' => 'editbloc'),true),																	'LINK_DELETE'	=>  $this->urlAddQuery(array('id'=>$id,'bloc' =>$i, 'action' => 'deletebloc'),true),																	 'LIEN_REMONTER' => $this->urlAddQuery(array('id'=>$id,'bloc' =>$i, 'move' => 'up'),true),																	'LIEN_DESCENDRE' => $this->urlAddQuery(array('id'=>$id, 'bloc' =>$i,'move' => 'down'),true)																																					));				$i++;			}		}		//$this->parseBlocsList($id);			}		public function publishBloc($publish){		// = le bloc est publié donc on veut le metter hors ligne!		self::$_page -> publishBloc($this -> _id);	}		public function addBloc($id){		if(isset($_POST['title']) && !empty($_POST['title'])){			self::$_page -> addBloc($_POST['title'] );		}	}	public function editBloc(){		if(isset($_POST) and !empty($_POST)){			$dataForm = $_POST['contenu'];			// DATA UPDATE			// $this -> echo_r($dataForm);			self::$_page -> setBloc($dataForm,$this -> _id);			// date of modification (warning : modification are saved!)			$this -> saveConfirmation();		}		$design = self::$_page -> getDesign();		$urlCss = ROOT_URL.$this->_config['path']['design'].$design['theme'].$this->_config['path']['css'].$this->_config['css']['all'];		$this -> wyMeditor($urlCss);				$bloc = self::$_page -> getBloc($this -> _id);		self::$arrayToParse['BLOC_TITRE'] = $bloc['titre'];		self::$arrayToParse['BLOC_CONTENU'] = $bloc['contenu'];		self::$arrayToParse['BLOC_ID'] =$this -> _id;				}	public function deletebloc($id){		$bloc = self::$_page -> getBloc($this -> _id);		self::$arrayToParse['BLOC_TITRE'] = $bloc['titre'];		self::$arrayToParse['BLOC_CONTENU'] = $bloc['contenu'];		self::$arrayToParse['BLOC_ID'] =$this -> _id;		if(isset($_POST) and !empty($_POST)){			if(isset($_POST['ok']) && $_POST['ok'] == 'ok'){					// On supprime la page				$this->_templateNameModule = 'confirmation'; 				self::$_page -> deleteBloc($this -> _id); 			// delete file				}else{				$this->_templateNameModule = 'deletebloc';				$redirectPaht = basename(parse_url($_SERVER['REQUEST_URI'],PHP_URL_PATH ));				$redirectPaht  = $_SERVER['SERVER_NAME'].rtrim(dirname($_SERVER['SCRIPT_NAME']), '/\\');				//FrontController::redirect('');							}		}else{			$this->_templateNameModule = 'deletebloc';			$this -> formTarget($this->urlAddQuery(array('id'=>$id, 'bloc' =>$this -> _id, 'action' => 'deletebloc'),true), 'FICHIER_CIBLE');		}	}			}		?>