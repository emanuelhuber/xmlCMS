<?php//extends ModuleSqueletteclass ModuleArticleEditer extends ModuleAdmin{		private $_id = '';	// private static $_page = null;		public function __construct($url, $query, $urlArray, $conf){		parent::__construct($url, $query, $urlArray, $conf);				require(ROOT_PATH.$this->_config['librairie']['interstitium'].'page.class.php');		$path = BASE_PATH.$this->_config['path']['data'].$urlArray[1].'/'.$urlArray[2].$this->_config['ext']['data'];		self::$myPage = new Xml_Page($path);	}		public function setData(){		$this -> _templateNameModule 	= 'index';		self::$multiArrayToParse[]= array('crumbs' => array('LINK' 	=> 'fr,menu,index.html',															'NAME' 	=> 'Menu',															'TITLE' 	=> 'Menu',															'IS_LINK' 	=> true										));		// si un id (d'un index) est passé en argument		// Collection d'articles		 if(isset($this -> _urlQuery['id']) && !empty($this -> _urlQuery['id'])){			$id = $this -> _urlQuery['id'];			$idArray = explode(',',$id);						// tag object			$pathTag = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/tags-'.$idArray[0].'.data';			require(ROOT_PATH.$this->_config['librairie']['interstitium'].'tags.class.php');			$this -> _tags = new Tags($pathTag);						// ARTICLE			// si un nom d'article est passé en argument			if(isset($this -> _urlQuery['article']) && !empty($this -> _urlQuery['article'])){	// si un article est demandé				$this -> _id = $this -> _urlQuery['article'];				self::$arrayToParse['FORM_ID'] =	$id.','.$this -> _id;				$pathData = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/'.$this -> _urlQuery['article'].$this->_config['ext']['data'];								if(!is_file($pathData)){					$this -> _tags 	-> deleteTags($this -> _id);				// delete tags					$this -> removeTofluxSyndication(self::$arrayToParse['FORM_ID']);		 // Flux ATOM						self::$_page -> deleteArticle($pathData,$this -> _id); 			// delete file						FrontController::redirect('fr,menu,index.html');				} 			// INDEX			// sinon			}else{				self::$arrayToParse['FORM_ID'] =	$id;				$pathData = ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/00-index'.$this->_config['ext']['data'];				if(!is_file($pathData)){					$this -> _menu -> deleteNodeId($id);			// supprimer du menu que si un index est appellé qui n'existe pas !					$this -> _tags 	-> deleteTags($id);				// delete tags					$this -> removeTofluxSyndication(self::$arrayToParse['FORM_ID']);		 						// Flux ATOM						self::clearDir(ROOT_PATH.$this->_config['path']['data'].$idArray[1].'/'.$idArray[2].'/') ;		// delete file + folder					FrontController::redirect('fr,menu,index.html');				} 			} 									if(!isset($this -> _urlQuery['action']) or empty($this -> _urlQuery['action'])){				$this -> _urlQuery['action'] = '';			}			$this -> setGlobalContent($this -> _urlQuery['action'],$pathData,$id); 		 }else{			// pas de fichier choisi => redirection			// XXX				FrontController::redirect('fr,menu,index.html');		} 			}			public function setArticleNavigation($articlesList){		if(isset($articlesList[$this -> _id])){			$idArray = array_keys($articlesList);			$posPage = array_search($this -> _id, $idArray);			if($posPage > 0){				$idP = $idArray[$posPage - 1];				self::$multiArrayToParse[]= array('previous' => array('LINK' => $this -> _idPage.','.$articlesList[$idP]['id'].$this->_config['ext']['web'],																	  'TITLE' => $articlesList[$idP]['titre']																		));			}			if(isset($idArray[$posPage + 1])){				$idN = $idArray[$posPage + 1];				self::$multiArrayToParse[]= array('next' => array('LINK' => $this -> _idPage.','.$articlesList[$idN]['id'].$this->_config['ext']['web'],																  'TITLE' => $articlesList[$idN]['titre']																));			}		} 	}		public function setPageNavigation($nbItem, $nbItemPerPage){		self::$arrayToParse['NB_ARTICLE'] = $nbItem;		$ratio = floor(($nbItem-1)/$nbItemPerPage)+1;			if($ratio > 1){			self::$arrayToParse['IS_NAVIGATION']=true;			for($k = 1; $k <= $ratio; $k++){				self::$multiArrayToParse[]= array('navigation' => array('NB' => $k,																		'LINK' =>  $this->urlAddQuery(array('nb'=>$k))																		));			}		}else{			self::$arrayToParse['IS_NAVIGATION']=false;		}	}	//-------------------------	//  EDITING	//-------------------------		public function setGlobalContent($action,$path,$id){						require(ROOT_PATH.$this->_config['librairie']['interstitium'].'article.class.php');		self::$_page =  new Xml_Article($path);				//self::$arrayToParse['LINK_EDITCONTENT'] =	$this -> _url.$this->_config['ext']['web'].'?id='.$id.'&action=editcontent';		self::$arrayToParse['LINK_INDEX'] 		=	$this->urlAddQuery(array('id'=>$id),true);		self::$arrayToParse['LINK_EDITMENU'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editmenu'),true);		self::$arrayToParse['LINK_EDITINFO'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editindexinfo'),true);		self::$arrayToParse['LINK_EDITDESIGN'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editdesign'),true);				self::$arrayToParse['LINK_EDITCONTENT_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editcontentarticle'),true);		self::$arrayToParse['LINK_EDITINFO_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editinfoarticle'),true);		self::$arrayToParse['LINK_PUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'publisharticle'),true);				/* self::$arrayToParse['LINK_EDITPUBLISH'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editpublish'),true);		 */		self::$arrayToParse['LIEN_TOUS_LES_ARTICLES']=	$this -> _idPage.$this->_config['ext']['web'].'?id='.$id;				// Infos-data from the index!		$infos = self::$_page -> getInfo();		$this -> parseArray($infos,'form_');				// Si le contenu est publié		if($infos['publication'] == 1){			self::$arrayToParse['IS_ONLINE'] 	=	true;			self::$arrayToParse['LINK_PUBLISH'] 	=	$this->urlAddQuery(array('publish' => 'unpublish'),false);		}else{			self::$arrayToParse['IS_ONLINE'] 	=	false;			self::$arrayToParse['LINK_PUBLISH'] 	=	$this->urlAddQuery(array('publish' => 'publish'),false);		}		// Si y'a pas de droits		(intval($infos['droit'])<0) ? self::$arrayToParse['HAS_RIGHT'] = false :  self::$arrayToParse['HAS_RIGHT'] = true;					//self::$arrayToParse['FORM_ID'] =	$id.$this->_id;		$titreCollection = self::$_page -> setArticlesList();		self::$arrayToParse['TITRE_COLLECTION'] = $titreCollection;					$this -> formTarget($_SERVER['REQUEST_URI'], 'FICHIER_CIBLE');		$this -> formTarget($_SERVER['REQUEST_URI'], 'ADD_FLUX_CIBLE');						// XXX free $action = filter_var($action, FILTER_SANITIZE_STRING);		switch($action){			case 'editindexinfo':				$this->_templateNameModule = 'indexinfo';				if(isset($_POST) and !empty($_POST)){					$postInfo = $_POST['info'];					// edit xml file					$this -> editInfoXml($id, $postInfo, $infos);					//$nbItemPerPage = self::$_page -> getOption();					$postOption = $_POST['option'];					$this -> editOptionXml($id, $postOption);					$data = array('droits' => $postInfo['droit']);					// edit menu file					$this ->  updateMenu($id, $data);				}				// parse data				$this -> parseInfo();				// BreadCrumbs				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				break;			case 'editmenu':				$this->_templateNameModule = 'indexmenu';				$this -> editMenu($id);				// BreadCrumbs				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				break;			case 'editcontentarticle':				$this->_templateNameModule = 'articlecontent';				$this -> editContent();				// BreadCrumbs				$this->setBreadCrumbs($this->urlAddQuery(array('id'=>$id),true), $titreCollection, $titreCollection, true);				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				break;			case 'editinfoarticle':				$this->_templateNameModule = 'articleinfo';								if(isset($_POST['info']) and !empty($_POST['info'])){					$postInfo = $_POST['info'];					// edit xml file										$this -> editInfoXml($id.','.$this -> _id, $postInfo, $infos);					// edit 00-index.xml				}				// parse data				$this -> parseInfo();				// BreadCrumbs				$this->setBreadCrumbs($this->urlAddQuery(array('id'=>$id),true), $titreCollection, $titreCollection, true);				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				break;						case 'deletearticle':				$this -> deleteArticle($path,$id);				$this -> _tags 	-> deleteTags($id);				// delete tags				// supprimer du flux rss				$this -> removeTofluxSyndication(self::$arrayToParse['FORM_ID']);		 // Flux ATOM					self::$arrayToParse['CURRENT_CRUMB'] = $titreCollection;				break;			case 'editdesign':				$this->_templateNameModule = 'editdesign';				$this -> editDesign($path,$id);				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];				break;			case 'createarticle':				$this -> createArticle($path,$id,$infos['droit']);				/* $titreCollection = self::$_page -> setArticlesList();				$articlesList = self::$_page -> getSelectionArticleList(); */				//break;			default:				//echo 'Pas d action définie!!!! Erreur!!!';				$this -> _templateNameModule 	= 'index';				$target = $this->urlAddQuery(array('id'=>$id, 'action' => 'createarticle'),true);				$this -> formTarget($target, 'FICHIER_CIBLE');				// BreadCrumbs				self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];								break;		}						$this->articlesList($id);		$this -> publish($id, $infos);				/* // PUBLIER (ONLINE)		if(isset($this -> _urlQuery['publish']) && $this -> _urlQuery['publish']=='publish'){			// Si pas de droits => ajouter au flux rss			if(($infos['droit']<0 && $infos['publication']!=1)) {				// $infos['titre']='Page : '.$infos['titre'];				$this -> addTofluxSyndication(self::$arrayToParse['FORM_ID'],$infos);		 // Flux ATOM							}			self::$arrayToParse['IS_ONLINE'] 	=	true;			self::$arrayToParse['LINK_PUBLISH'] 	=	$this->urlAddQuery(array('publish' => 'unpublish'),false);			// Actualiser la date de création du fichier (aujourd'hui)			self::$_page -> setInfo($id, array('publication'=> 1, 'date' => date('d.m.Y')));			$this ->  updateMenu($id, array('publication'=> 1));			// Actualiser le menu				// RETIRER DE LA PUBLICATIO (OFF-LINE)		}elseif(isset($this -> _urlQuery['publish']) && $this -> _urlQuery['publish']=='unpublish'){			// supprimer du flux rss			$this -> removeTofluxSyndication(self::$arrayToParse['FORM_ID']);		 // Flux ATOM							self::$arrayToParse['IS_ONLINE'] 	=	false;			self::$arrayToParse['LINK_PUBLISH'] 	=	$this->urlAddQuery(array('publish' => 'publish'),false);			// actualiser le fichier _id.xml ainsi que 00-index.xml			self::$_page -> setInfo($id, array('publication'=> 0, 'date' => date('d.m.Y')));			$this ->  updateMenu($id, array('publication'=> 0));			// Actualiser le menu		} */			}		public function articlesList($id){			$titreCollection = self::$_page -> setArticlesList();			$articlesList = self::$_page -> getSelectionArticleList();			//------------------------------			// PREVIOUS - NEXT			$this -> setArticleNavigation($articlesList);						// LINKS FOR THE TAGS (single article)			//$this -> setTagsLink($articlesList);						// NAVIGATION PAGE			$nbItemPerPage = self::$_page -> getOption();			self::$arrayToParse['OPTION_NB'] = $nbItemPerPage ;			//$nbItem	= count($selectionArticlesList);			$nbItem	= count($articlesList);			$this -> setPageNavigation($nbItem, $nbItemPerPage);									if(isset($this -> _urlQuery['nb'])){				$nb = intval($this -> _urlQuery['nb']);				$nb = floor(abs($nb));			}else{				$nb = 1;			}			$i=1;						// foreach($selectionArticlesList as $key=>$value){			foreach($articlesList as $key=>$article){				// $article = $articlesList[$value];				$maDate = $this->afficherDate($article['date'],$_SESSION['langue'],$nomJour=1,$moisAbrev=1);					if(($nb-1)*$nbItemPerPage<$i && $i<=$nb*$nbItemPerPage){						$online = false;						$publish='publish';						if($article['publication']==1){							$online = true;							$publish='unpublish';						}						(intval($article['droit'])<0) ? $right = false :  $right = true;						self::$multiArrayToParse[]= array('article' => array('TITRE' 	=> $article['titre'],																		 'DATE' 	=> $article['date'],																		 'AUTEUR' 	=> $article['author'],																		 'DESCRIPTION' 	=> $article['description'],																		 'MOTSCLEFS' 	=> $article['tags'],																		// 'LIEN'		=> $this -> _idPage.','.$article['id'].$this->_config['ext']['web'],																		 'NOM_JOUR'  	=> 	$maDate[0],																		 'JOUR'			=>  $maDate[1],																		 'MOIS'			=> 	$maDate[2],																		 'ANNEE' 		=> 	$maDate[4],																		 'HAS_RIGHT'	=>  $right,																		 'IS_ONLINE'	=>  $online,																		 'LINK_PUBLISH'	=>  $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'],'publish' => $publish),true),																		 'LINK_EDIT'	=>  $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'], 'action' => 'editcontentarticle'),true),																		 'LINK_DELETE'	=>  $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'], 'action' => 'deletearticle'),true)																																				// $this -> _idPage.','.$article['id'].$this->_config['ext']['web'].'?';																	));					}					$i++;			}					return $titreCollection;	}		public function createArticle($path,$id,$droit){		if(isset($_POST['title']) && !empty($_POST['title'])){			//echo $_POST['title'];			$idArray = explode(',',$id);			$origine = BASE_PATH.'/datamodel/'.$this->_module.'/';			$destination = $dirPath = dirname($path).'/';			if(is_dir($origine) && is_dir($destination)){				if(is_file($origine.'new.xml')){					// Copy & Rename					$fileName = self::removeAccents(urldecode($_POST['title']), $charset='utf-8',$del=false);					$fileName = strtolower($fileName);					$fileName = self::removeShortWords($fileName);					if($idFile = self::copyFile($origine.'new.xml', $destination.$fileName.'.xml')){						$path_parts = pathinfo($idFile);						// $idFile = $path_parts['filename'];	// FREE XXX filename existe pas!						$idFile = substr($path_parts['basename'], 0, -4);						//echo '<br/>'.$idFile;						self::$_page -> addArticleItem($idFile, $title=$_POST['title'], $droit = $droit, $auteur = $_SESSION[self::$loginType]['username'] );						//$self::_page -> addArticleItem($idFile);												/* 						XXX						// LISTER = site map						$pathSitemap = BASE_PATH.'/sitemap.xml';		// in "admin" folder									require(ROOT_PATH.$this->_config['librairie']['interstitium'].'lister.class.php');						$lister = new Lister($pathSitemap);						$lister -> addEntry($id, $_POST['title'], 'www', $postData['description'], $droit, $oldData['publication']); */					}								}			}		}	}		public function deleteArticle($path,$id){		//$idArray = explode(',',$id);		if(isset($_POST) and !empty($_POST)){			if(isset($_POST['ok']) && $_POST['ok'] == 'ok'){					// On supprime la page				$this->_templateNameModule = 'confirmation'; 				self::$_page -> deleteArticle($path,$this -> _id); 			// delete file				}else{				$this->_templateNameModule = 'delete';				$redirectPaht = basename(parse_url($_SERVER['REQUEST_URI'],PHP_URL_PATH ));				$redirectPaht  = $_SERVER['SERVER_NAME'].rtrim(dirname($_SERVER['SCRIPT_NAME']), '/\\');				//FrontController::redirect('');							}		}else{			$this->_templateNameModule = 'delete';			$this -> formTarget($this->urlAddQuery(array('id'=>$id, 'article' =>$this -> _id, 'action' => 'deletearticle'),true), 'FICHIER_CIBLE');		}	}	}		?>