<?php//extends ModuleSqueletteclass ModuleAdminArticle extends ModuleAdmin{		private $_id = null;		// ID de l'article	"nom-de-l-article"	// private static $_page = null;		public function __construct($url, $query, $urlArray, $conf){		parent::__construct($url, $query, $urlArray, $conf);				require(ROOT_PATH.$this->_config['librairie']['interstitium'].'article.class.php');		require(ROOT_PATH.$this->_config['librairie']['interstitium'].'page.class.php');		//$path = BASE_PATH.$this->_config['path']['data'].$urlArray[1].'/'.$urlArray[2].$this->_config['ext']['data'];		self::$myPage = new Xml_Page($urlArray);	}	public function setData(){		$this -> _templateNameModule 	= 'index';		self::$multiArrayToParse[]= array('crumbs' => array('LINK' 	=> 'fr,menu,index.html',															'NAME' 	=> 'Menu',															'TITLE' 	=> 'Menu',															'IS_LINK' 	=> true										));		// si un id (d'une collection d'articles) est passé en argument		 if(isset($this -> _urlQuery['id']) && !empty($this -> _urlQuery['id'])){			$idCollection = $this -> _urlQuery['id'];		// = lg,article,nom-de-la-collection-d-article			$idArray = explode(',',$idCollection );						// ARTICLE			// si un nom d'article est passé en argument			if(isset($this -> _urlQuery['article']) && !empty($this -> _urlQuery['article'])){	// si un article est demandé				$this -> _id = $this -> _urlQuery['article'];				$idArray[] = $this -> _urlQuery['article'];				}else{				self::$arrayToParse['FORM_ID'] =	$idCollection;							} 						$this -> formTarget($_SERVER['REQUEST_URI'], 'FICHIER_CIBLE');			//$this -> echo_r($idArray);						// PAGE object			self::$_page = new Xml_Article($idArray, 'root');						// si l'article n'existe pas			if(self::$_page -> error){				// redirection si le fichier n'existe pas				//$this -> _menu -> deleteNodeId($idPage);	// supprime du menu				Xml_Page::removeId(implode(',',$idArray));				// supprime du flux, tags etc.				//self::$_page -> deleteArticle(IIDD);				FrontController::redirect('');			}			// si la collection d'article n'existe pas			if(self::$_page -> errorList){				// redirection si le fichier n'existe pas				$this -> _menu -> deleteNodeId($idCollection);	// supprime du menu				Xml_Page::removeId($idCollection);				// supprime du flux, tags etc.				//self::$_page -> deleteArticle(IIDD);				FrontController::redirect('');			}			// remonter/descendre un article			if(isset($this -> _urlQuery['move']) && !empty($this -> _urlQuery['move'])){				self::$_page  -> moveNodeId($this -> _id,$this -> _urlQuery['move']);				FrontController::redirect(basename(parse_url($_SERVER['REQUEST_URI'],PHP_URL_PATH )).'?id='.$this -> _urlQuery['id']);			}			switch($this -> _action){				case 'editer':					$this -> editPage($idCollection);					// cette fonction publie le contenu, si le lien					// dsfsdfs/fr,page,editer?id=xx,xxxx,xxxx&publish=publish					// a été cliqué					$this -> publish(implode(',',$idArray));										break;				case 'supprimer':					$this -> deleteContent($idCollection);					$nbOfArticle = self::$_page -> getNumberOfArticles();					self::$arrayToParse['NB_ARTICLES'] 		=	$nbOfArticle;					break;				default:					break;			} 				// parse data			$this -> parseInfo();				}else{			// pas de fichier choisi => redirection			// XXX				FrontController::redirect('fr,menu,index.html');		} 			}			public function setArticleNavigation($articlesList){		if(isset($articlesList[$this -> _id])){			$idArray = array_keys($articlesList);			$posPage = array_search($this -> _id, $idArray);			if($posPage > 0){				$idP = $idArray[$posPage - 1];				self::$multiArrayToParse[]= array('previous' => array('LINK' => $this -> _idPage.','.$articlesList[$idP]['id'].$this->_config['ext']['web'],																	  'TITLE' => $articlesList[$idP]['titre']																		));			}			if(isset($idArray[$posPage + 1])){				$idN = $idArray[$posPage + 1];				self::$multiArrayToParse[]= array('next' => array('LINK' => $this -> _idPage.','.$articlesList[$idN]['id'].$this->_config['ext']['web'],																  'TITLE' => $articlesList[$idN]['titre']																));			}		} 	}		public function setPageNavigation($nbItem, $nbItemPerPage){		self::$arrayToParse['NB_ARTICLES'] = $nbItem;		$ratio = floor(($nbItem-1)/$nbItemPerPage)+1;			if($ratio > 1){			self::$arrayToParse['IS_NAVIGATION']=true;			for($k = 1; $k <= $ratio; $k++){				self::$multiArrayToParse[]= array('navigation' => array('NB' => $k,																		'LINK' =>  $this->urlAddQuery(array('nb'=>$k))																		));			}		}else{			self::$arrayToParse['IS_NAVIGATION']=false;		}	}	//-------------------------	//  EDITING	//-------------------------		public function editPage($id){				if(!isset($this -> _urlQuery['action']) or empty($this -> _urlQuery['action'])){				$this -> _urlQuery['action'] = '';			}		//$this -> setGlobalContent($this -> _urlQuery['action'],$idCollection); 		$action = $this -> _urlQuery['action'];				/* require(ROOT_PATH.$this->_config['librairie']['interstitium'].'article.class.php');		self::$_page =  new Xml_Article($path);		 */		//self::$arrayToParse['LINK_EDITCONTENT'] =	$this -> _url.$this->_config['ext']['web'].'?id='.$id.'&action=editcontent';		self::$arrayToParse['LINK_INDEX'] 		=	$this->urlAddQuery(array('id'=>$id),true);		self::$arrayToParse['LINK_EDITMENU'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editmenu'),true);		self::$arrayToParse['LINK_EDITINFO'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editindexinfo'),true);		self::$arrayToParse['LINK_EDITDESIGN'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editdesign'),true);				self::$arrayToParse['LINK_EDITCONTENT_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editcontentarticle'),true);		self::$arrayToParse['LINK_EDITINFO_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'editinfoarticle'),true);		self::$arrayToParse['LINK_PUBLISH_ARTICLE'] 	=	$this->urlAddQuery(array('id'=>$id,'article' =>$this -> _id, 'action' => 'publisharticle'),true);				/* self::$arrayToParse['LINK_EDITPUBLISH'] 	=	$this->urlAddQuery(array('id'=>$id, 'action' => 'editpublish'),true);		 */		self::$arrayToParse['LIEN_TOUS_LES_ARTICLES']=	$this -> _idPage.$this->_config['ext']['web'].'?id='.$id;				// Infos-data of the index / article!		$infos = self::$_page -> getInfo();		$this -> parseArray($infos,'form_');						// Si le contenu est publié		if($infos['publication'] == 1){			self::$arrayToParse['IS_ONLINE'] 	=	true;			self::$arrayToParse['LINK_PUBLISH'] 	=	$this->urlAddQuery(array('publish' => 'unpublish'),false);		}else{			self::$arrayToParse['IS_ONLINE'] 	=	false;			self::$arrayToParse['LINK_PUBLISH'] 	=	$this->urlAddQuery(array('publish' => 'publish'),false);		}		// Si y'a pas de droits		(intval($infos['droit'])<0) ? self::$arrayToParse['HAS_RIGHT'] = false :  self::$arrayToParse['HAS_RIGHT'] = true;					//self::$arrayToParse['FORM_ID'] =	$id.$this->_id;		//$titreCollection = self::$_page -> getArticlesList();		(isset($infos['collection_titre'])) ? $titreCollection = $infos['collection_titre'] : $titreCollection = $infos['titre'];		self::$arrayToParse['TITRE_COLLECTION'] = $titreCollection;		/* if(!isset($this -> _urlQuery['collection_titre']))			 */		$this -> formTarget($_SERVER['REQUEST_URI'], 'FICHIER_CIBLE');		$this -> formTarget($_SERVER['REQUEST_URI'], 'ADD_FLUX_CIBLE');				$this->_templateNameModule = $action;		// BreadCrumbs		self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['FORM_TITRE'];						// XXX free $action = filter_var($action, FILTER_SANITIZE_STRING);		switch($action){			case 'editindexinfo':				$this -> editInfo($id);				$this -> editOption($id);				break;			case 'editmenu':				$this -> editMenu($id);				break;			case 'editcontentarticle':				$this -> editContent();				// BreadCrumbs				$this->setBreadCrumbs($this->urlAddQuery(array('id'=>$id),true), $titreCollection, $titreCollection, true);				break;			case 'editinfoarticle':				$this -> editInfo($id.','.$this -> _id);				// BreadCrumbs				$this->setBreadCrumbs($this->urlAddQuery(array('id'=>$id),true), $titreCollection, $titreCollection, true);				break;						case 'deletearticle':				$this -> deleteArticle($id);				self::$arrayToParse['CURRENT_CRUMB'] = $titreCollection;				break;			case 'editdesign':				$this -> editDesign($id);				break;			case 'createarticle':				$this -> createArticle($id,$infos['droit']);			default:				$this -> _templateNameModule 	= 'index';				$target = $this->urlAddQuery(array('id'=>$id, 'action' => 'createarticle'),true);				$this -> formTarget($target, 'FICHIER_CIBLE');								break;		}				$this->articlesList($id);			}		public function articlesList($id){			//$titreCollection = self::$_page -> getArticlesList();			$articlesList = self::$_page -> getSelectionArticleList($by='',$where=false,$ord='asc',$published_only=FALSE);			//------------------------------			// PREVIOUS - NEXT			$this -> setArticleNavigation($articlesList);						// LINKS FOR THE TAGS (single article)			//$this -> setTagsLink($articlesList);						// NAVIGATION PAGE			$nbItemPerPage = self::$_page -> getOption();			self::$arrayToParse['OPTION_NB'] = $nbItemPerPage ;			//$nbItem	= count($selectionArticlesList);			$nbItem	= count($articlesList);			$this -> setPageNavigation($nbItem, $nbItemPerPage);									if(isset($this -> _urlQuery['nb'])){				$nb = intval($this -> _urlQuery['nb']);				$nb = floor(abs($nb));			}else{				$nb = 1;			}			$i=1;						// foreach($selectionArticlesList as $key=>$value){			foreach($articlesList as $key=>$article){				// $article = $articlesList[$value];				$maDate = $this->afficherDate($article['date'],$_SESSION['langue'],$nomJour=1,$moisAbrev=1);					if(($nb-1)*$nbItemPerPage<$i && $i<=$nb*$nbItemPerPage){						$online = false;						$publish='publish';						if($article['publication']==1){							$online = true;							$publish='unpublish';						}						(intval($article['droit'])<0) ? $right = false :  $right = true;						self::$multiArrayToParse[]= array('article' => array('TITRE' 	=> $article['titre'],																		 'DATE' 	=> $article['date'],																		 'AUTEUR' 	=> $article['author'],																		 'DESCRIPTION' 	=> $article['description'],																		 'MOTSCLEFS' 	=> $article['tags'],																		 'LIEN_REMONTER' => $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'], 'move' => 'up'),true),																		'LIEN_DESCENDRE' => $this->urlAddQuery(array('id'=>$id, 'article' =>$article['id'],'move' => 'down'),true),																		// 'LIEN'		=> $this -> _idPage.','.$article['id'].$this->_config['ext']['web'],																		 'NOM_JOUR'  	=> 	$maDate[0],																		 'JOUR'			=>  $maDate[1],																		 'MOIS'			=> 	$maDate[2],																		 'ANNEE' 		=> 	$maDate[4],																		 'HAS_RIGHT'	=>  $right,																		 'IS_ONLINE'	=>  $online,																		 'LINK_PUBLISH'	=>  $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'],'publish' => $publish),true),																		 'LINK_EDIT'	=>  $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'], 'action' => 'editcontentarticle'),true),																		 'LINK_DELETE'	=>  $this->urlAddQuery(array('id'=>$id,'article' =>$article['id'], 'action' => 'deletearticle'),true)																																				// $this -> _idPage.','.$article['id'].$this->_config['ext']['web'].'?';																	));					}					$i++;			}					//return $titreCollection;	}		public function createArticle($id,$droit){		if(isset($_POST['title']) && !empty($_POST['title'])){						$idFile = self::removeAccents(urldecode($_POST['title']), $charset='utf-8',$del=false);			$idFile = strtolower($idFile);			$idFile = self::removeShortWords($idFile,1);	// supprime les mots d'une lettre						//echo $_POST['title'];			$idArray = explode(',',$id);			// PAGE object			/* echo $id.','.$idFile;			$idArray[3] = $idFile;			self::$_page = new Xml_Article($idArray, 'root'); */						$infos = array();			$infos['titre'] = urldecode($_POST['title']);			$infos['date'] = date('j.m.Y');			$infos['auteur'] = 'inconnu';						if(isset($_SESSION['login_admin']['username']))	$infos['auteur'] = $_SESSION['login_admin']['username'];							self::$_page -> createArticle($idFile, $title=$infos['titre'],  $auteur = $infos['auteur'] , $date=$infos['date']  );					}	}		public function deleteArticle($id){		//$idArray = explode(',',$id);		if(isset($_POST) and !empty($_POST)){			if(isset($_POST['ok']) && $_POST['ok'] == 'ok'){					// On supprime la page				$this->_templateNameModule = 'confirmation'; 				self::$_page -> deleteArticle($this -> _id); 			// delete file				}else{				$this->_templateNameModule = 'delete';				$redirectPaht = basename(parse_url($_SERVER['REQUEST_URI'],PHP_URL_PATH ));				$redirectPaht  = $_SERVER['SERVER_NAME'].rtrim(dirname($_SERVER['SCRIPT_NAME']), '/\\');				//FrontController::redirect('');							}		}else{			$this->_templateNameModule = 'delete';			$this -> formTarget($this->urlAddQuery(array('id'=>$id, 'article' =>$this -> _id, 'action' => 'deletearticle'),true), 'FICHIER_CIBLE');		}	}}		?>