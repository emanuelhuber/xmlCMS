<?php// Fichier lu// "00-index.xml"// éventuellement "article.xml"//class ModuleGallerie extends ModuleSquelette{		private $_id = '';	// id du nom de l'article (p.ex. "science-religion-opposition")	private $_collection = '';		public function __construct($url, $query, $urlArray, $conf){		parent::__construct($url, $query, $urlArray, $conf);				require(ROOT_PATH.$this->_config['librairie']['interstitium'].'article.class.php');		require(ROOT_PATH.$this->_config['librairie']['interstitium'].'gallerie.class.php');						self::$myPage = new Xml_Gallerie($urlArray);		if(self::$myPage -> error){			// redirection si le fichier n'existe pas			self::$myMenu -> deleteNodeId($this -> _idPage);	// supprime du menu			Xml_Article::removeId($this -> _idPage);				// supprime du flux, tags etc.						FrontController::errorMessage('ARTICLE_000 | Problème = article inexistant ('.$this -> _idPage.').');			FrontController::redirect($_SESSION['langue'].',erreur,400.html');	// sinon, erreur!		}		if(isset($urlArray[3])){	// si un article est demandé			$this -> _templateNameModule 	= 'article';			$this -> _id = $urlArray[3];	// id de l'article			$this -> setImages();		}else{			$this -> _templateNameModule 	= 'index';			} 		$this -> _collection = $urlArray[0].','.$urlArray[1].','.$urlArray[2];		self::$arrayToParse['COLLECTION'] =	$urlArray[2];	}		public function getRights($infos){		if(isset($infos['collection_droit'])){			// si la collection a un droit supérieur, alors l'article hérite du droit			// de la collection			(intval($infos['collection_droit'])> intval($infos['droit'])) ? $droit = $infos['collection_droit'] : $droit = $infos['droit'];		}else{			$droit =  $infos['droit'];		}		return $droit;	}	public function getPublished($infos){		if(isset($infos['collection_publication'])){			// si la collection n'est pas publié, alors l'article n'est pas publié			(intval($infos['collection_publication']) != 1) ? $publication = 0 : $publication = $infos['publication'];		}else{			$publication =  $infos['publication'];		}		return $publication;	}			public function setBreadCrumbs($titre){		$activePage = self::$myMenu -> getMenuItem($this -> _idPage);		if(isset($activePage['nom'])){			if($this -> _id == ''){					self::$arrayToParse['CURRENT_CRUMB'] = $activePage['nom'];			}else{				self::$multiArrayToParse[]= array('crumbs' => array('LINK' 	=> $this->_idPage.$this->_config['ext']['web'],																	'NAME' 	=> $activePage['nom'],																	'TITLE' 	=> $activePage['nom'],																	'IS_LINK' 	=> true																));				if(isset(self::$arrayToParse['INFO_TITRE'])){					self::$arrayToParse['CURRENT_CRUMB'] = self::$arrayToParse['INFO_TITRE'];				}			}		}	}		public function setImages(){		$images = self::$myPage -> getImage();		//$this -> echo_r($images);		if(!empty($images) > 0){		foreach($images as $img){			self::$multiArrayToParse[]= array('images' => array('ID' => $img['id'],																'SRC' => ROOT_URL.'/'.$img['src'],																'SRC_MINIATURE' => ROOT_URL.'/'.$img['src_miniature'],																'TITLE' => $img['title'],																'ALT' => $img['alt'],																'DESCRIPTION' => $img['description']																	));				}		}	}		public function setData(){		self::$arrayToParse['LIEN_TOUS_LES_ARTICLES']=	$this -> _idPage.$this->_config['ext']['web'];		//--------------------------		// READ THE DATA		$titre = self::$myPage -> setArticlesList();		$articlesList = self::$myPage -> getSelectionArticleList();				$this -> setBreadCrumbs($titre);		//--------------------------		// ANALYSIS QUERY		if(isset($this->_urlQuery['select']) && isset($this->_urlQuery['where'])){			// XXX free $select = (filter_var($this->_urlQuery['select'],FILTER_SANITIZE_STRING));			$select = $this->_urlQuery['select'];			$where = urldecode($this->_urlQuery['where']);			// XXX free $where = (filter_var($where,FILTER_SANITIZE_STRING));			$selectionArticlesList = self::$myPage -> getSelectionArticleList($select,$where);			self::$arrayToParse['CRITERIUM'] = $select;			self::$arrayToParse['VALUE'] = $where;			if(!is_array($selectionArticlesList)){				$selectionArticlesList = array();				self::$arrayToParse['VALUE'] .= '  -  RIEN TROUVEEEE!!!';			}else{			}			self::$arrayToParse['IS_SELECTION'] = true;		}else{			self::$arrayToParse['IS_SELECTION'] = false;			$selectionArticlesList = array_keys($articlesList);		}							if(count($selectionArticlesList)>0){					//------------------------------			// PREVIOUS - NEXT			$this -> setArticleNavigation($articlesList);						// LINKS FOR THE TAGS (single article)			$this -> setTagsLink($articlesList);						// NAVIGATION PAGE			$nbItemPerPage = self::$myPage -> getOption();			$nbItem	= count($selectionArticlesList);			$this -> setPageNavigation($nbItem, $nbItemPerPage);									if(isset($this -> _urlQuery['nb'])){				$nb = intval($this -> _urlQuery['nb']);				$nb = floor(abs($nb));				$start = ($nb-1)*$nbItemPerPage;	//  < $i				$end = $nb*$nbItemPerPage;	// => $i			}elseif($this -> _id == ''){	// pas d'article sélectionné				$start = 0;				$end = $nbItemPerPage;			}else{				$start = 0;				$end = 20;			}			$i=1;			foreach($selectionArticlesList as $key=>$value){				$article = $articlesList[$value];				$maDate = $this->afficherDate($article['date'],$_SESSION['langue'],$nomJour=1,$moisAbrev=1);					if($start < $i && $i <= $end){						self::$multiArrayToParse[]= array('article' => array('TITRE' 	=> $article['titre'],																		 'DATE' 	=> $article['date'],																		 'AUTEUR' 	=> $article['author'],																		 'DESCRIPTION' 	=> $article['description'],																		 'MOTSCLEFS' 	=> $article['tags'],																		 'IMAGE' 		=> ROOT_URL.$this->_config['path']['data'].'gallerie/'.self::$arrayToParse['COLLECTION'].'/'.$article['id'].'/miniatures/'.$article['image'],																		 																		 'LIEN'		=> $this -> _idPage.','.$article['id'].$this->_config['ext']['web'],																		 'NOM_JOUR'  	=> 	$maDate[0],																		 'JOUR'			=>  $maDate[1],																		 'MOIS'			=> 	$maDate[2],																		 'ANNEE' 		=> 	$maDate[4]																	));					}					$i++;			}		}else{			self::$arrayToParse['IS_NAVIGATION']=false;			self::$arrayToParse['NB_ARTICLE'] = 0;		}			$this -> setAuthorsList($this -> _idPage.$this->_config['ext']['web']);			$this -> setTagsList($this -> _idPage.$this->_config['ext']['web']);			$this -> setDatesList($this -> _idPage.$this->_config['ext']['web']);	}			public function setAuthorsList($link){		// Array Auteur		$authorArticlesList = self::$myPage -> getSelectionArticleList('author');		//$this-> echo_r($authorArticlesList);		foreach($authorArticlesList as $key => $values){			self::$multiArrayToParse[]= array('auteur' => array('NOM'    => $key,																'LIEN'   => $this->urlAddQuery(array('select'=>'author', 'where' => $key),false,$link),																'NOMBRE' => count($values)															    ));		}	}	public function setTagsList($link){		// Array Tag		$tagArticlesList = self::$myPage -> getSelectionArticleList('tag');		foreach($tagArticlesList as $key => $values){			self::$multiArrayToParse[]=array('motclef'=>array('NOM' 	=> $key,															  'LIEN' 	=>$this->urlAddQuery(array('select'=>'tag', 'where' => $key),false,$link),															  'NOMBRE'	=> count($values)															  )); 		}	}		public function setDatesList($link){		// Array date		$dateArticlesList = self::$myPage -> getSelectionArticleList('date');		foreach($dateArticlesList['year'] as $key=>$values){			self::$multiArrayToParse[]=array('year'=>array('NOM' 	=> $key,														   'LIEN' 	=> $this->urlAddQuery(array('select'=>'year', 'where' => $key),false,$link),														   'NOMBRE'	=> count($values)														   ));			$monthNb = $dateArticlesList['month'][$key];			krsort($monthNb);			foreach($monthNb as $k=>$values){				self::$multiArrayToParse[]=array('year.month'=>array('NOM' 	  => $this -> _dateName['month'][intval($k)],																	 'LIEN'   => $this->urlAddQuery(array('select'=>'month', 'where' => $key.'.'.$k),false,$link),															         'NOMBRE' => count($values)															    ));			}		} 	}			public function setTagsLink($articlesList){		if(isset($articlesList[$this -> _id]['tags'])){			$tags = explode(',',$articlesList[$this -> _id]['tags']);			foreach($tags as $tag){				$tag = trim($tag);				$link = $this -> _collection.'.html';				self::$multiArrayToParse[]= array('tags' => array('LINK' => $this->urlAddQuery(array('select'=>'tag', 'where' => $tag),false,$link),																  'NAME' => $tag																 ));			}		}	}		public function setArticleNavigation($articlesList){		if(isset($articlesList[$this -> _id])){			$idArray = array_keys($articlesList);			$posPage = array_search($this -> _id, $idArray);			if($posPage > 0){				self::$arrayToParse['IS_PREVIOUS'] = true;				$idP = $idArray[$posPage - 1];				self::$arrayToParse['PREVIOUS_LINK'] = $this -> _idPage.','.$articlesList[$idP]['id'].$this->_config['ext']['web'];				self::$arrayToParse['PREVIOUS_TITLE'] = $articlesList[$idP]['titre'];			}else{				self::$arrayToParse['IS_PREVIOUS'] = false;							}			if(isset($idArray[$posPage + 1])){				self::$arrayToParse['IS_NEXT'] = true;				$idN = $idArray[$posPage + 1];				self::$arrayToParse['NEXT_LINK'] = $this -> _idPage.','.$articlesList[$idN]['id'].$this->_config['ext']['web'];				self::$arrayToParse['NEXT_TITLE'] = $articlesList[$idN]['titre'];			}else{				self::$arrayToParse['IS_NEXT'] = false;							}		} 	}		public function setPageNavigation($nbItem, $nbItemPerPage){		self::$arrayToParse['NB_ARTICLE'] = $nbItem;		$ratio = floor(($nbItem-1)/$nbItemPerPage)+1;			if($ratio > 1){			self::$arrayToParse['IS_NAVIGATION']=true;			for($k = 1; $k <= $ratio; $k++){				self::$multiArrayToParse[]= array('navigation' => array('NB' => $k,																		'LINK' =>  $this->urlAddQuery(array('nb'=>$k))																		));			}		}else{			self::$arrayToParse['IS_NAVIGATION']=false;		}	}		}?>